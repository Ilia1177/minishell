/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   wildcards.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jhervoch <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/13 14:06:48 by jhervoch          #+#    #+#             */
/*   Updated: 2025/02/17 14:37:41 by jhervoch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

# include "minishell.h"


int middle_search(char **file_str, char *pattern_str, int *nb_find)
{
  char *tmp_str;

  tmp_str = ft_strnstr(*file_str, pattern_str,ft_strlen(*file_str));
  if (tmp_str)
  {
    tmp_str = ft_substr(tmp_str, 1, ft_strlen(tmp_str));
    free(*file_str);
    *file_str = tmp_str;
    ft_printf(1,"%s\n", *file_str);
    *nb_find += 1;
    return (1);
  }
  free(tmp_str);
  return (0);
}

int end_search(char **file_str, char *pattern_str, int *nb_find)
{
  char *tmp_str;

  tmp_str = ft_substr(*file_str,ft_strlen(*file_str)-ft_strlen(pattern_str),
                ft_strlen(*file_str));
  if (tmp_str && !ft_strcmp(tmp_str, pattern_str))
  {
    free(*file_str);
    *file_str = tmp_str;
    ft_printf(1,"%s\n", *file_str);
    *nb_find += 1;
    return (1);
  }
  free(tmp_str);
  return (0);
}

int begin_search(char **file_str, char *pattern_str, int *nb_find)
{
  char *tmp_str;

  if (!ft_strncmp(*file_str, pattern_str, ft_strlen(pattern_str)))
  {
    tmp_str = ft_substr(*file_str,ft_strlen(pattern_str), ft_strlen(*file_str));
    free(*file_str);
    *file_str = tmp_str;
    ft_printf(1,"%s\n", *file_str);
    *nb_find += 1;
    return (1);
  }
  return (0);
}

void list_dir(t_list **list)
{
  t_list  *elem;
  DIR* dir;
  struct dirent* dr;
  char  *file_name;

  dir = opendir(".");
  if (!dir)
  {
    perror("opendir");
    exit(EXIT_FAILURE);
  }
  while ((dr = readdir(dir)))
  {
    file_name = ft_strdup(dr->d_name);
    elem = ft_lstnew((void*)file_name);
    ft_lstadd_back(list, elem);
  }
  closedir(dir);
}

void print_lst_dir(t_list *list)
{
  t_list *current;

  current = list;
  printf("print list dir:");
  while(current)
  {
    printf("%s|", (char *)current->content);
    current = current->next;
  }
  printf("\n");
}

void  wildcards_search(DIR* dir, char **patterns, int nb_pat, char *str)
{
  int i;
  int nb_find;
  int not_find;
  char *file_name;
  struct dirent* dr;

  while ((dr = readdir(dir)))
  {
    i = 0;
    nb_find = 0;
    not_find = 1;
    file_name = ft_strdup(dr->d_name);
    while (patterns[i] && not_find)
    {
      if ( i == 0 && str[i] != '*')
        not_find = begin_search(&file_name,patterns[i], &nb_find);
      else if (i == nb_pat -1 && str[ft_strlen(str)-1] != '*')
        not_find = end_search(&file_name, patterns[i], &nb_find);
      else
        not_find = middle_search(&file_name, patterns[i], &nb_find);
      if (nb_find == nb_pat)
        ft_printf(1,"TROUVE YOUPI---%s\n", dr->d_name );
      i++;
    }
  }
}

void	wildcards(t_token *token, t_data *data)
{
  DIR* dir;
  /* struct dirent* dr; */
  char  *str;
  char **patterns;
  char  *file_name;
  char  **args;
  int   pos_wild;
  int nb_pat;
  int i;
  t_list *list;
  /* int nb_find; */
  int   arg_len;
  char *only_wild;
  /* int   not_find; */

  (void)data;
  (void)file_name;
  (void)i; 

  //si il n'y a pas de wildcards
  if (!token->cmd->args[1] || !ft_strchr(token->cmd->args[1],'*'))
    return ;

  
  args = token->cmd->args;
  str = args[1];
  arg_len = ft_strlen(str);
 
  //syntax error
  if (ft_strcmp(str, "*.")== 0 || ft_strcmp(str, ".*")== 0 )
    printf(NMF_MSG);
  
  only_wild = ft_strtrim(str, "*");
  if (*only_wild == '\0')
    printf("QUE DES WILDCARDS");
  
  pos_wild = ft_strnlen(str, '*');
  printf("pos *:%d\n",pos_wild);

  patterns = ft_split(str,'*');

  nb_pat=0;
  while (patterns[nb_pat])
    nb_pat++;
  printf("nb patterns *:%d\n",nb_pat);
  
  dir = opendir(".");
  if (!dir)
  {
    perror("opendir");
    exit(EXIT_FAILURE);
  }
  wildcards_search(dir, patterns, nb_pat, str);
  /* while ((dr = readdir(dir))) */
  /* { */
  /*   i = 0; */
  /*   nb_find = 0; */
  /*   not_find = 1; */
  /*   file_name = ft_strdup(dr->d_name); */
  /*   while (patterns[i] && not_find) */
  /*   { */
  /*     if ( i == 0 && str[i] != '*') */
  /*       not_find = begin_search(&file_name,patterns[i], &nb_find); */
  /*     else if (i == nb_pat -1 && str[arg_len-1] != '*') */
  /*       not_find = end_search(&file_name, patterns[i], &nb_find); */
  /*     else */
  /*       not_find = middle_search(&file_name, patterns[i], &nb_find); */
  /*     if (nb_find == nb_pat) */
  /*       ft_printf(1,"TROUVE YOUPI---%s\n", dr->d_name ); */
  /*     i++; */
  /*   } */
  /* } */
  closedir(dir);
  list = NULL;
  list_dir(&list);
  print_lst_dir(list);
}

/* void	wildcards(t_token *token, t_data *data) */
/* { */
/*   DIR* dir; */
/*   struct dirent* dr; */
/*   char  *str; */
/*   char **patterns; */
/*   char  *tofind; */
/*   char  **args; */
/*   int   pos_wild; */
/*   int nb_pat; */
/*   int i; */
/*   int nb_find; */
/*   int   arg_len; */
/*   char *only_wild; */
/**/
/*   (void)data; */
/*   (void)tofind; */
/*   (void)i;  */
/**/
/*   //si il n'y a pas de wildcards */
/*   if (!token->cmd->args[1] || !ft_strchr(token->cmd->args[1],'*')) */
/*     return ; */
/**/
/*    */
/*   args = token->cmd->args; */
/*   str = args[1]; */
/*   arg_len = ft_strlen(str); */
/*   */
/*   //syntax error */
/*   if (ft_strcmp(str, "*.")== 0 || ft_strcmp(str, ".*")== 0 ) */
/*     printf(NMF_MSG); */
/*    */
/*   only_wild = ft_strtrim(str, "*"); */
/*   if (*only_wild == '\0') */
/*     printf("QUE DES WILDCARDS"); */
/*    */
/*   pos_wild = ft_strnlen(str, '*'); */
/*   printf("pos *:%d\n",pos_wild); */
/**/
/*   patterns = ft_split(str,'*'); */
/**/
/*   nb_pat=0; */
/*   while (patterns[nb_pat]) */
/*     nb_pat++; */
/*   printf("nb patterns *:%d\n",nb_pat); */
/*    */
/*   dir = opendir("."); */
/*    */
/*   if (!dir) */
/*   { */
/*     perror("opendir"); */
/*     exit(EXIT_FAILURE); */
/*   } */
/**/
/*    */
/*   while ((dr = readdir(dir))) */
/*   { */
/*     i = 0; */
/*     nb_find = 0; */
/*     tofind = dr->d_name; */
/*     //teste commence par aaaa* */
/*      if (!ft_strncmp(dr->d_name, str, pos_wild)) */ 
/*     while (patterns[i]) */
/*     { */
/*       if ( i == 0 && str[i] != '*') */
/*       { */
/*         if (!ft_strncmp(tofind, patterns[i], ft_strlen(patterns[i]))) */
/*         { */
/*           tofind = ft_substr(tofind,ft_strlen(patterns[i]), ft_strlen(tofind)); */
/*           ft_printf(1,"%s\n", tofind); */
/*           nb_find++; */
/*         } */
/*         else */
/*           break ; */
/*       } */
/*       else if (i == nb_pat -1 && str[arg_len-1] != '*') */
/*       { */
/*         tofind = ft_substr(tofind,ft_strlen(tofind)-ft_strlen(patterns[i]), ft_strlen(tofind)); */
/*         if (tofind) */
/*         { */
/*           if (!ft_strcmp(tofind, patterns[i])) */
/*           { */
/*             ft_printf(1,"end -%s\n", tofind); */
/*             nb_find++; */
/*           } */
/*           else */
/*             break ; */
/*         } */
/*       } */
/*       else */
/*       { */
/*         tofind = ft_strnstr(tofind, patterns[i], ft_strlen(tofind)); */
/*         if (tofind) */
/*         { */
/*           tofind = ft_substr(tofind, 1, ft_strlen(tofind)); */
/*           ft_printf(1,"%s\n", tofind ); */
/*           nb_find++; */
/*         } */
/*         else */
/*           break ; */
/*       } */
/*       if (nb_find == nb_pat) */
/*         ft_printf(1,"TROUVE YOUPI---%s\n", dr->d_name ); */
/**/
/*       i++; */
/*     } */
/*   } */
/*    */
/*   closedir(dir); */
/* } */
/**/
